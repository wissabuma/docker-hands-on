# make sure all your machines are up and running
for i in {1..3}; do sudo docker-machine status "$USER"$i; done

# if necessary start them
for i in {1..3}; do sudo docker-machine start "$USER"$i; done

# show Engine info
sudo docker $(sudo docker-machine config "$USER"1) info
sudo docker $(sudo docker-machine config "$USER"2) info
sudo docker $(sudo docker-machine config "$USER"3) info

# initialize a swarm (can get simpler form if ssh to host and init from there)
sudo docker $(sudo docker-machine config "$USER"1) swarm init --advertise-addr $(sudo docker-machine ip "$USER"1)


# inspect info again
sudo docker $(sudo docker-machine config "$USER"1) info

# list swarm nodes
sudo docker $(sudo docker-machine config "$USER"1) node ls

# get tokens for join a worker
sudo docker $(sudo docker-machine config "$USER"1) swarm join-token worker
export workertoken=$(sudo docker $(sudo docker-machine config "$USER"1) swarm join-token worker -q)
export managertoken=$(sudo docker $(sudo docker-machine config "$USER"1) swarm join-token manager -q) - will not use it directly


# join "$USER"2, "$USER"3 Docker Engines (docker machines) to the swarm as workers
sudo docker $(sudo docker-machine config "$USER"2) swarm join --token $workertoken $(sudo docker-machine ip "$USER"1):2377
sudo docker $(sudo docker-machine config "$USER"3) swarm join --token $workertoken $(sudo docker-machine ip "$USER"1):2377

# inspect info for "$USER"2, "$USER"3 Docker Engines (docker machines)
sudo docker $(sudo docker-machine config "$USER"2) info
sudo docker $(sudo docker-machine config "$USER"3) info

# show the cluster info
sudo docker $(sudo docker-machine config "$USER"1) node ls
sudo docker $(sudo docker-machine config "$USER"2) node ls   - will give an error
sudo docker $(sudo docker-machine config "$USER"2) node ls   - will give an error

# Drain a node  (observe command structure)
sudo docker $(sudo docker-machine config "$USER"1) node update --availability drain "$USER"2
sudo docker $(sudo docker-machine config "$USER"1) node ls

# reactivate the node
sudo docker $(sudo docker-machine config "$USER"1) node update --availability active "$USER"2


# list available services
sudo docker $(sudo docker-machine config "$USER"1) service ls

# Deploy a service  
sudo docker $(sudo docker-machine config "$USER"1) service create --replicas 1 --name docker-demo -p 8080:8080 mariolet/docker-demo:20

# list available services (might require some seconds to come up)
sudo docker $(sudo docker-machine config "$USER"1) service ls

# ps the service
sudo docker $(sudo docker-machine config "$USER"1) service ps docker-demo

# query the service - CLI
curl $(sudo docker-machine ip "$USER"1):8080

# query the service - WEB

# query the service via ssh tunnel
ssh user@100.100.5.5 -L LOCALPORT:REMOTE-IP:REMOTEPORT -Nv

# ps the service again and pick single container names then go to worker node and see logs
sudo docker $(sudo docker-machine config "$USER"1) service ps docker-demo
sudo docker $(sudo docker-machine config MACHINE-NAME-WHERE-SERVICE-IS-RUNNING) ps
sudo docker $(sudo docker-machine config MACHINE-NAME-WHERE-SERVICE-IS-RUNNING) logs <service name>

# Up-Scaling service to 3
sudo docker $(sudo docker-machine config "$USER"1) service scale docker-demo=3

# list the service - note changes
sudo docker $(sudo docker-machine config "$USER"1) service ls

# ps the service 
sudo docker $(sudo docker-machine config "$USER"1) service ps docker-demo

# Query the service - Note load balancing.. do it with multiple sessions (best by ssh tunnels)

# promote the other nodes to become managers
sudo docker $(sudo docker-machine config "$USER"1) node promote "$USER"2
sudo docker $(sudo docker-machine config "$USER"1) node promote "$USER"3


# NOW node ls again
sudo docker $(sudo docker-machine config "$USER"1) node ls


# play with falut-tolerance buy taking down the leader

# stop a service
# remove a service
# leave a swarm
....etc
